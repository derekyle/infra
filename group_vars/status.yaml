---

# ktz-figurine
figurine_name: ktz-status

# grog.package
package_list:
    - name: bash-completion
    - name: curl
    - name: htop
    - name: ncdu
    - name: net-tools
    - name: nmap
    - name: sudo
    - name: tmux
    - name: tree
    - name: wget
    - name: wireguard
  
# geerlingguy.security
security_ssh_port: "{{ status_ssh_port }}"
security_sudoers_passworded:
- "{{ main_username }}"

# geerlingguy.ntp
ntp_timezone: "America/New_York"

# geerlingguy.docker
# defaults are sane, no need to configure anything
# https://github.com/geerlingguy/ansible-role-docker/blob/master/defaults/main.yml

# geerlingguy.github_users
github_users_authorized_keys_exclusive: true
github_users:
    # You can specify an object with 'name' (required) and 'groups' (optional):
    - name: "{{ main_username }}"
      groups: sudo,docker

# ironicbadger.bash-aliases (formerly ferrarimarco.bash-aliases)
bash_aliases:
    - { alias: "dtail", command: "docker logs -tf --tail='50' " }
    - { alias: "dstop", command: "docker stop `docker ps -aq`" }
    - { alias: "drm", command: "docker rm `docker ps -aq`" }
    - { alias: "dcp", command: "docker-compose -f ~/docker-compose.yml " }
    - { alias: "dprune", command: "docker image prune" }
    - { alias: "dprunesys", command: "docker system prune --all" }
    - { alias: "dtop", command: "docker run --name ctop  -it --rm -v /var/run/docker.sock:/var/run/docker.sock quay.io/vektorlab/ctop" }
    - { alias: "appdata", command: "cd {{ status_appdata_path }}" }
    - { alias: "zspace", command: "zfs list -o space" }
    - { alias: "zsnap", command: "zfs list -t snapshot" }

# ktz-traefik
traefik_file_provider: false
traefik_enable_dashboard: false
traefik_insecure_transport: false

# ironicbadger.docker_compose_generator
appdata_path: "{{ status_appdata_path }}/appdata"
docker_compose_generator_output_path: "/home/{{ main_username }}"
docker_compose_generator_uid: "1000"
docker_compose_generator_gid: "1000"
main_uid: "1000"
main_gid: "1000"
containers:
###
  - service_name: traefik
    active: true
    image: traefik
    container_name: tr
    ports:
        - 80:80
        - 443:443
    volumes:
        - "{{ status_appdata_path }}/traefik:/etc/traefik"
        - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
        - "CLOUDFLARE_EMAIL={{ cloudflare_account_email }}"
        - "CLOUDFLARE_API_KEY={{ cloudflare_api_key }}"
    restart: unless-stopped
###
  - service_name: statping
    active: true
    image: hunterlong/statping:v0.80.70
    environment:
      - VIRTUAL_HOST=localhost
      - VIRTUAL_PORT=8080
      - DB_CONN=postgres
      - DB_HOST=postgres
      - DB_USER=statping
      - DB_PASS=statping23
      - DB_DATABASE=statping
    depends_on:
      - postgres
    labels:
      - traefik.enable=true
      - "traefik.http.routers.statping.rule=Host(`{{ status_url_status }}`)"
      - traefik.http.routers.statping.entrypoints=websecure
      - traefik.http.routers.statping.tls.certresolver=cloudflare
      - "traefik.http.services.statping.loadbalancer.server.port=8080"
    volumes:
      - "{{ status_appdata_path }}/statping:/app"
    restart: unless-stopped
  - service_name: postgres
    active: true
    image: postgres:11
    environment:
      - "POSTGRES_DB={{ status_statping_db_database }}"
      - "POSTGRES_USER={{ status_statping_db_user }}"
      - "POSTGRES_PASSWORD={{ status_statping_db_password }}"
    volumes:
      - "{{ status_appdata_path }}/postgres:/var/lib/postgresql/data"
    restart: unless-stopped
###
  - service_name: smokeping
    active: true
    image: linuxserver/smokeping
    volumes:
      - "{{ appdata_path }}/smokeping/config:/config"
      - "{{ appdata_path }}/smokeping/data:/data"
    labels:
      - traefik.enable=true
      - "traefik.http.routers.smokeping.rule=Host(`{{ status_url_smokeping }}`)"
      - traefik.http.routers.smokeping.entrypoints=websecure
      - traefik.http.routers.smokeping.tls.certresolver=cloudflare
      - traefik.http.services.smokeping.loadbalancer.server.port=80
    include_global_env_vars: true
    restart: unless-stopped
###
  - service_name: librespeed
    active: true
    image: linuxserver/librespeed
    labels:
      - traefik.enable=true
      - traefik.http.routers.librespeed.rule=Host(`librespeed.selfhosted.show`)
      - traefik.http.routers.librespeed.entrypoints=websecure
      - traefik.http.routers.librespeed.tls.certresolver=cloudflare
      - traefik.http.services.librespeed.loadbalancer.server.port=80
    environment:
      - MODE=standalone
      - TELEMETRY=true
      - "PASSWORD={{ librespeed_password }}"
    include_global_env_vars: true
    restart: unless-stopped