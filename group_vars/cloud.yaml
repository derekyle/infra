---

# ktz-figurine
figurine_name: ktz-cloud

# grog.package
package_list:
    - name: bash-completion
    - name: curl
    - name: htop
    - name: ncdu
    - name: net-tools
    - name: nmap
    - name: sanoid
    - name: sudo
    - name: tmux
    - name: tree
    - name: wget
    - name: wireguard-tools
    - name: zfsutils-linux
  
# geerlingguy.security
security_ssh_port: "{{ cloud_ssh_port }}"
security_sudoers_passworded:
- "{{ main_username }}"

# geerlingguy.ntp
ntp_timezone: "America/New_York"

# geerlingguy.docker
# defaults are sane, no need to configure anything
# https://github.com/geerlingguy/ansible-role-docker/blob/master/defaults/main.yml

# geerlingguy.github_users
github_users_authorized_keys_exclusive: true
github_users:
    # You can specify an object with 'name' (required) and 'groups' (optional):
    - name: "{{ main_username }}"
      groups: sudo,docker

# ferrarimarco.bash-aliases
bash_aliases:
  - { alias: "dtail", command: "docker logs -tf --tail='50' " }
  - { alias: "dstop", command: "docker stop `docker ps -aq`" }
  - { alias: "drm", command: "docker rm `docker ps -aq`" }
  - { alias: "dcp", command: "docker-compose -f ~/docker-compose.yml "}
  - { alias: "dcporph", command: "docker-compose -f ~/docker-compose.yml --remove-orphans "}
  - { alias: "dprune", command: "docker image prune" }
  - { alias: "dprunesys", command: "docker system prune --all" }
  - { alias: "dtop", command: "docker run --name ctop  -it --rm -v /var/run/docker.sock:/var/run/docker.sock quay.io/vektorlab/ctop"}
  - { alias: "appdata", command: "cd /mnt/tank/appdata" }
  - { alias: "zspace", command: "zfs list -o space" }
  - { alias: "zsnap", command: "zfs list -t snapshot" }
  - { alias: "dfclean", command: "df -h -x tmpfs -x zfs -t fuse.mergerfs -t xfs -t ext4"}
  - { alias: "dfzfs", command: "df -h -x tmpfs -t fuse.mergerfs -t xfs -t ext4"}

# ktz-sanoid
sanoid_config_source: sanoid-cloud.conf

# ktz-traefik
traefik_file_provider: false
traefik_enable_dashboard: false
traefik_insecure_transport: true

# ironicbadger.docker_compose_generator
docker_compose_generator_uid: "1000"
docker_compose_generator_gid: "1000"
docker_compose_generator_output_path: "/home/{{ main_username }}"
appdata_path: "{{ cloud_appdata_path }}" # used for other non cloud roles
containers:
###
  - service_name: tr
    active: true
    image: traefik
    ports:
        - 80:80
        - 443:443
    volumes:
        - "{{ cloud_appdata_path }}/traefik:/etc/traefik"
        - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
        - "CLOUDFLARE_EMAIL={{ cloudflare_account_email }}"
        - "CLOUDFLARE_API_KEY={{ cloudflare_api_key }}"
    restart: unless-stopped
###
  - service_name: ktz-blog
    active: true
    image: ghost:3-alpine
    labels:
      - traefik.enable=true
      - "traefik.http.routers.ktzblog.rule=Host(`{{ cloud_url_ktz_blog }}`)"
      - traefik.http.routers.ktzblog.entrypoints=websecure
      - traefik.http.routers.ktzblog.tls.certresolver=cloudflare
      - "traefik.http.services.ktzblog.loadbalancer.server.port={{ cloud_ghost_port }}"
    environment:
      - NODE_ENV=production
      - "url=https://{{ cloud_url_ktz_blog }}"
    volumes:
      - "{{ cloud_appdata_path }}/ktz-blog:/var/lib/ghost/content"
    restart: unless-stopped
###
  - service_name: mum-blog
    active: true
    image: ghost:3-alpine
    labels:
      - traefik.enable=true
      - "traefik.http.routers.mumblog.rule=Host(`{{ cloud_url_mum_blog }}`)"
      - traefik.http.routers.mumblog.entrypoints=websecure
      - traefik.http.routers.mumblog.tls.certresolver=cloudflare
      - "traefik.http.services.mumblog.loadbalancer.server.port={{ cloud_ghost_port }}"
    environment:
      - NODE_ENV=production
      - "url=https://{{ cloud_url_mum_blog }}"
    volumes:
      - "{{ cloud_appdata_path }}/mum-blog:/var/lib/ghost/content"
    restart: unless-stopped
###
  - service_name: pmsbook
    active: false
    image: nginx:stable
    labels:
      - traefik.enable=true
      - "traefik.http.routers.pmsbook.rule=Host(`{{ cloud_url_pms }}`)"
      - traefik.http.routers.pmsbook.entrypoints=websecure
      - traefik.http.routers.pmsbook.tls.certresolver=cloudflare
      - "traefik.http.services.pmsbook.loadbalancer.server.port=80"
    volumes:
      - "{{ cloud_appdata_path }}/pms-book/book:/usr/share/nginx/html:ro"
    restart: unless-stopped
###
  - service_name: unifi
    active: true
    image: linuxserver/unifi-controller
    labels:
      - traefik.enable=true
      - "traefik.http.routers.ubiq.rule=Host(`{{ cloud_url_ubiq }}`)"
      - traefik.http.routers.ubiq.entrypoints=websecure
      - traefik.http.routers.ubiq.tls=true
      - traefik.http.routers.ubiq.tls.certresolver=cloudflare
      - traefik.http.services.ubiq.loadbalancer.server.scheme=https
      - traefik.http.services.ubiq.loadbalancer.server.port=8443
    ports:
      - "{{ cloud_unifi_port_advertise }}:{{ cloud_unifi_port_advertise_int }}"
      - 3478:3478/udp
    volumes:
      - "{{ cloud_appdata_path }}/unifi:/config"
    include_global_env_vars: true
    restart: unless-stopped
###
  - service_name: librespeed
    active: true
    image: linuxserver/librespeed
    labels:
      - traefik.enable=true
      - traefik.http.routers.librespeed.rule=Host(`speed.{{ domain_cloud }}`)
      - traefik.http.routers.librespeed.entrypoints=websecure
      - traefik.http.routers.librespeed.tls.certresolver=cloudflare
      - traefik.http.services.librespeed.loadbalancer.server.port=80
    environment:
      - MODE=standalone
      - TELEMETRY=true
      - "PASSWORD={{ librespeed_password }}"
    include_global_env_vars: true
    restart: unless-stopped
###
  - service_name: termpad
    active: true
    image: spyrosr/termpad
    labels:
      - traefik.enable=true
      - traefik.http.routers.paste.rule=Host(`paste.{{ domain_cloud }}`)
      - traefik.http.routers.paste.entrypoints=websecure
      - traefik.http.routers.paste.tls.certresolver=cloudflare
      - traefik.http.services.paste.loadbalancer.server.port=8000
    environment:
      - "DOMAIN_NAME=paste.{{ domain_cloud }}" # You probably want to change this
      - HTTPS=true
      #- DELETE_AFTER=0 # If you are hosting for yourself keeping them forever is probably fine
    volumes:
      - "{{ cloud_appdata_path }}/termpad:$HOME/.local/share/termpad/"
    include_global_env_vars: true
    restart: unless-stopped